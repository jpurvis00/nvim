return {
	{
		"hrsh7th/cmp-buffer", -- source for text in buffer
	},
	{
		"hrsh7th/cmp-path", -- source for file system paths
	},
	{
		"hrsh7th/cmp-cmdline", -- Cmdline source for nvim-cmp
	},
	{
		"onsails/lspkind.nvim", -- vs-code like pictograms
	},
	{
		"hrsh7th/cmp-nvim-lsp", -- LSP source for nvim-cmp
	},
	{
		"L3MON4D3/LuaSnip",
		dependencies = {
			"saadparwaiz1/cmp_luasnip", -- for autocompletion
			"rafamadriz/friendly-snippets", -- useful snippets
		},
	},
	{
		"hrsh7th/nvim-cmp",
		--event = "InsertEnter",
		--dependencies = {
		--	"hrsh7th/cmp-buffer", -- source for text in buffer
		--	"hrsh7th/cmp-path", -- source for file system paths
		--	"hrsh7th/cmp-cmdline", -- Cmdline source for nvim-cmp
		----	"hrsh7th/cmp-nvim-lsp", -- LSP source for nvim-cmp
		----	{
		----		"L3MON4D3/LuaSnip",
		----		-- follow latest release.
		----		version = "v2.*", -- Replace <CurrentMajor> by the latest released major (first number of latest release)
		----		-- install jsregexp (optional!).
		----		--build = "make install_jsregexp",
		----	},
		----	"saadparwaiz1/cmp_luasnip", -- for autocompletion
		----	"rafamadriz/friendly-snippets", -- useful snippets
		--	"onsails/lspkind.nvim", -- vs-code like pictograms
		--	--"kristijanhusak/vim-dadbod-completion", -- completion for vim-dadbod
		--},
		config = function()
			local cmp = require("cmp")

			--local luasnip = require("luasnip")

			--local lspkind = require("lspkind")

			---- loads vscode style snippets from installed plugins (e.g. friendly-snippets)
			require("luasnip.loaders.from_vscode").lazy_load()

			cmp.setup({
				completion = {
					completeopt = "menu,menuone,preview,noselect",
				},
				snippet = { -- configure how nvim-cmp interacts with snippet engine
					expand = function(args)
						require("luasnip").lsp_expand(args.body)
						--vim.fn["vsnip#anonymous"](args.body)
					end,
				},
				window = {
					completion = cmp.config.window.bordered(),
					documentation = cmp.config.window.bordered(),
				},
				mapping = cmp.mapping.preset.insert({
					["<S-k>"] = cmp.mapping.select_prev_item(), -- previous suggestion
					["<S-j>"] = cmp.mapping.select_next_item(), -- next suggestion
					["<C-b>"] = cmp.mapping.scroll_docs(-4),
					["<C-f>"] = cmp.mapping.scroll_docs(4),
					["<C-Space>"] = cmp.mapping.complete(), -- show completion suggestions
					["<C-a>"] = cmp.mapping.abort(), -- close completion window
					["<CR>"] = cmp.mapping.confirm({ select = true }),
				}),
				-- sources for autocompletion
				sources = cmp.config.sources({
					{ name = "nvim_lsp" },
					{ name = "vsnip" }, -- snippets
					{ name = "luasnip" }, -- snippets
					{ name = "buffer" }, -- text within current buffer
					{ name = "path" }, -- file system paths
					{ name = "cmdline" }, -- command-line mode
					{ name = "sqlls" }, -- completion for vim-dadbod
					{ name = "csharp_ls" },
					--{ name = "dbui" }, -- completion for vim-dadbod
				}),
				--{
				--	--{ name = "nvim_lsp" },
				--	{ name = "buffer" },
				--	--{ name = "path" },
				--	--{ name = "cmdline" },
				--	--{ name = "sqlls" }, -- completion for vim-dadbod
				--	--{ name = "csharp_ls" },
				--	--{ name = "dbui" }, -- completion for vim-dadbod
				--}),
				-- configure lspkind for vs-code like pictograms in completion menu
				--formatting = {
				--	format = lspkind.cmp_format({
				--		maxwidth = 50,
				--		ellipsis_char = "...",
				--	}),
				--	expandable_indicator = false,
				--},
				-- setup vim-dadbod
				--cmp.setup.filetype({ "sql" }, {
				--filetype = {
				--	{ "sql" },
				--	sources = {
				--		{ name = "vim-dadbod-completion" },
				--		{ name = "buffer" },
				--	},
				--},
			})

			--local function setup_cmp()
			--	-- Setup for '/' and '?' (search mode)
			--	cmp.setup.cmdline({ "/", "?" }, {
			--		mapping = cmp.mapping.preset.cmdline(),
			--		sources = {
			--			{ name = "buffer" },
			--		},
			--	})
			--end
			---- Setup for ':' (command-line mode)
			--cmp.setup.cmdline(":", {
			--	mapping = cmp.mapping.preset.cmdline(),
			--	sources = cmp.config.sources({
			--		{ name = "path" },
			--	}, {
			--		{ name = "cmdline" },
			--	}),
			--	matching = { disallow_symbol_nonprefix_matching = false },
			--})
			--setup_cmp()
		end,
	},
}
