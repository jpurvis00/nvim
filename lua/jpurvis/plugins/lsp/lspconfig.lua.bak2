return {
	"neovim/nvim-lspconfig",
	event = { "BufReadPre", "BufNewFile" },
	dependencies = {
		"hrsh7th/cmp-nvim-lsp",
		"nanotee/sqls.nvim",
		{ "antosha417/nvim-lsp-file-operations", config = true },
		{ "folke/neodev.nvim", opts = {} },
	},
	config = function()
		local lspconfig = require("lspconfig")
		local mason_lspconfig = require("mason-lspconfig")

		-- [[ 1. Define the on_attach function ONCE. ]]
		-- This function will be called for every server that attaches to a buffer.
		-- It's cleaner than creating a separate autocommand.
		local on_attach = function(client, bufnr)
			local keymap = vim.keymap
			local opts = { buffer = bufnr, silent = true }

			-- Set your keymaps here, same as before
			opts.desc = "Show LSP references"
			keymap.set("n", "gR", "<cmd>Telenpm install -g typescriptscope lsp_references<CR>", opts)
			opts.desc = "Go to declaration"
			keymap.set("n", "gD", vim.lsp.buf.declaration, opts)
			opts.desc = "Show LSP definitions"
			keymap.set("n", "gd", "<cmd>Telescope lsp_definitions<CR>", opts)
			opts.desc = "Show LSP implementations"
			keymap.set("n", "gi", "<cmd>Telescope lsp_implementations<CR>", opts)
			opts.desc = "Show LSP type definitions"
			keymap.set("n", "gt", "<cmd>Telescope lsp_type_definitions<CR>", opts)
			opts.desc = "See available code actions"
			keymap.set({ "n", "v" }, "<leader>ca", vim.lsp.buf.code_action, opts)
			opts.desc = "Smart rename"
			keymap.set("n", "<leader>rn", vim.lsp.buf.rename, opts)
			opts.desc = "Show buffer diagnostics"
			keymap.set("n", "<leader>D", "<cmd>Telescope diagnostics bufnr=0<CR>", opts)
			opts.desc = "Show line diagnostics"
			keymap.set("n", "<leader>d", vim.diagnostic.open_float, opts)
			opts.desc = "Go to previous diagnostic"
			keymap.set("n", "[d", vim.diagnostic.goto_prev, opts)
			opts.desc = "Go to next diagnostic"
			keymap.set("n", "]d", vim.diagnostic.goto_next, opts)
			opts.desc = "Show documentation for what is under cursor"
			keymap.set("n", "K", vim.lsp.buf.hover, opts)
			opts.desc = "Restart LSP"
			keymap.set("n", "<leader>rs", ":LspRestart<CR>", opts)
		end

		-- [[ 2. Defer sign definitions to prevent timing issues. ]]
		vim.api.nvim_create_autocmd("VimEnter", {
			pattern = "*",
			callback = function()
				local signs = { Error = " ", Warn = " ", Hint = "󰠠 ", Info = " " }
				for type, icon in pairs(signs) do
					local hl = "DiagnosticSign" .. type
					vim.sign.define(hl, { text = icon, texthl = hl, numhl = "" })
				end
			end,
		})

		local capabilities = require("cmp_nvim_lsp").default_capabilities()

		--mason_lspconfig.setup_handlers({
		mason_lspconfig.setup({
			-- [[ 3. The default handler. This now uses lspconfig.setup, which is the correct way. ]]
			-- It will pass on_attach and capabilities to every server that doesn't have a custom handler.
			function(server_name)
				lspconfig[server_name].setup({
					on_attach = on_attach,
					capabilities = capabilities,
				})
			end,

			-- [[ 4. All custom handlers now also use lspconfig.setup. ]]
			-- We merge our default settings (on_attach, capabilities) with server-specific settings.
			["html"] = function()
				lspconfig.html.setup({
					on_attach = on_attach,
					capabilities = capabilities,
					filetypes = { "html", "templ", "ejs" },
					init_options = {
						configurationSection = { "html", "css", "javascript" },
						embeddedLanguages = { css = true, javascript = true },
					},
				})
			end,
			["lua_ls"] = function()
				lspconfig.lua_ls.setup({
					on_attach = on_attach,
					capabilities = capabilities,
					settings = {
						Lua = {
							diagnostics = { globals = { "vim" } },
							completion = { callSnippet = "Replace" },
						},
					},
				})
			end,
			["omnisharp"] = function()
				lspconfig.omnisharp.setup({
					on_attach = on_attach,
					capabilities = capabilities,
					cmd = {
						"dotnet",
						vim.fn.stdpath("data") .. "/mason/packages/omnisharp/libexec/OmniSharp.dll",
						"--languageserver",
					},
					enable_editor_config_support = true,
					enable_import_completion = true,
					organize_imports_on_format = true,
					enable_roslyn_analyzers = true,
					-- Formatting options and other settings remain the same
				})
			end,
			-- [[ 5. Corrected server name from 'ts_ls' to 'tsserver'. ]]
			["tsserver"] = function()
				lspconfig.tsserver.setup({
					on_attach = on_attach,
					capabilities = capabilities,
				})
			end,
			-- [[ 6. Corrected sqls setup, now inside the handlers table. ]]
			["sqls"] = function()
				lspconfig.sqls.setup({
					on_attach = function(client, bufnr)
						-- Call our default on_attach for keymaps
						on_attach(client, bufnr)
						-- Then call the special on_attach from the sqls.nvim plugin
						require("sqls").on_attach(client, bufnr)
					end,
					capabilities = capabilities,
				})
			end,
		})
	end,
}
